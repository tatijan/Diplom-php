<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    | Здесь вы можете указать, какие из соединений с базой данных ниже вы хотите
    | использовать в качестве подключения по умолчанию для всей работы базы данных. Конечно
    | вы можете использовать несколько соединений одновременно, используя библиотеку базы данных.
    */
    'default' => env('DB_CONNECTION', 'mysql'),
    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    | Вот каждая из настроек подключения к базе данных для вашего приложения.
    | Примеры настройки каждой платформы базы данных, которая
    | поддерживаемый Laravel показан ниже для упрощения разработки.
    | Вся работа с базами данных в Laravel выполняется с помощью средств PHP PDO
    | поэтому убедитесь, что у вас есть драйвер для вашей конкретной базы данных
    | Выбор установлен на вашем компьютере, прежде чем вы начнете разработку.
     |
    */
    'connections' => [
        'sqlite' => [
            'driver' => 'sqlite',
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
        ],
        'mysql' => [
            'driver' => 'mysql',
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'strict' => true,
            'engine' => null,
        ],
        'pgsql' => [
            'driver' => 'pgsql',
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'schema' => 'public',
            'sslmode' => 'prefer',
        ],
        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    | Эта таблица отслеживает все миграции, которые уже запущены для
    | ваше приложение. Используя эту информацию, мы можем определить, какой из
    | Миграции на диске фактически не выполнялись в базе данных.
    */
    'migrations' => 'migrations',
    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |Redis - это быстрое и расширенное хранилище значений ключей с открытым исходным кодом, которое также
    | обеспечивает более богатый набор команд, чем типичные системы ключ-значение
    | такие как APC или Memcached. Laravel позволяет легко классифицировать.
    */
    'redis' => [
        'client' => 'predis',
        'default' => [
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', 6379),
            'database' => 0,
        ],
    ],
];